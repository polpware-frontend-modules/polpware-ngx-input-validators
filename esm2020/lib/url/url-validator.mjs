import * as Url from 'url-parse';
export function validateUrl(value, parseQuery) {
    const pattern = '(https?://)?([\\da-z.-]+)\\.([a-z.]{2,6})[/\\w .-]*/?';
    const expr = new RegExp(pattern);
    if (!expr.test(value)) {
        return { url: 'Invalid URL' };
    }
    const results = new Url(value, parseQuery);
    if (!results.protocol || !results.host) {
        return { url: 'Invalid URL' };
    }
    return results;
}
/**
* Given a valid url, returns the normalized host name.
* The returned host name does not include www and is lowercase.
* The returned host includes host number.
* {} string
*/
export function normalizeHost(s, rm3w = true) {
    // Assume that s is a valid url
    const results = new Url(s);
    let h = results.host;
    if (h.startsWith('www')) {
        if (rm3w) {
            h = h.substring(4);
        }
    }
    else {
        if (!rm3w) {
            h = 'www.' + h;
        }
    }
    return h;
}
export function normalizeUrl(s, keepQuery = false, endWithSlash = false) {
    // Assume that s is a valid url
    const results = new Url(s);
    let path = results.pathname;
    path = path.replace(/\/\//g, '/');
    let u = results.protocol + '//' + results.host + path;
    if (keepQuery) {
        u = u + results.query;
    }
    if (u.endsWith('/')) {
        if (!endWithSlash) {
            u = u.substr(0, u.length - 1);
        }
    }
    else {
        if (endWithSlash) {
            u = u + '/';
        }
    }
    return u;
}
// Type predicate 
export function isInvalidSpec(v) {
    return v.url !== undefined;
}
export function buildUrlValidator(options) {
    const inputs = Object.assign({}, options);
    return function (control) {
        const value = control.value;
        // Virtually true if there is no any value. 
        if (!value) {
            return null;
        }
        const results = validateUrl(value, !!inputs.parseQuery);
        if (isInvalidSpec(results)) {
            return results;
        }
        if (inputs.https && results.protocol !== 'https') {
            return { url: 'HTTPS Required' };
        }
        return null;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXJsLXZhbGlkYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3BvbHB3YXJlL25neC1pbnB1dC12YWxpZGF0b3JzL3NyYy9saWIvdXJsL3VybC12YWxpZGF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxLQUFLLEdBQUcsTUFBTSxXQUFXLENBQUM7QUF5QmpDLE1BQU0sVUFBVSxXQUFXLENBQUMsS0FBYSxFQUFFLFVBQW1CO0lBRTFELE1BQU0sT0FBTyxHQUFHLHVEQUF1RCxDQUFDO0lBQ3hFLE1BQU0sSUFBSSxHQUFHLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2pDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ25CLE9BQU8sRUFBRSxHQUFHLEVBQUUsYUFBYSxFQUFFLENBQUM7S0FDakM7SUFFRCxNQUFNLE9BQU8sR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFvQixDQUFDO0lBRTlELElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRTtRQUNwQyxPQUFPLEVBQUUsR0FBRyxFQUFFLGFBQWEsRUFBRSxDQUFDO0tBQ2pDO0lBRUQsT0FBTyxPQUFPLENBQUM7QUFDbkIsQ0FBQztBQUdEOzs7OztFQUtFO0FBQ0YsTUFBTSxVQUFVLGFBQWEsQ0FBQyxDQUFTLEVBQUUsT0FBZ0IsSUFBSTtJQUN6RCwrQkFBK0I7SUFDL0IsTUFBTSxPQUFPLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFvQixDQUFDO0lBQzlDLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUM7SUFDckIsSUFBSSxDQUFDLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ3JCLElBQUksSUFBSSxFQUFFO1lBQ04sQ0FBQyxHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDdEI7S0FDSjtTQUFNO1FBQ0gsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNQLENBQUMsR0FBRyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1NBQ2xCO0tBQ0o7SUFFRCxPQUFPLENBQUMsQ0FBQztBQUNiLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLENBQVMsRUFBRSxZQUFxQixLQUFLLEVBQUUsZUFBd0IsS0FBSztJQUM3RiwrQkFBK0I7SUFFL0IsTUFBTSxPQUFPLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFvQixDQUFDO0lBQzlDLElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUM7SUFDNUIsSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ2xDLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQyxRQUFRLEdBQUcsSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBQ3RELElBQUksU0FBUyxFQUFFO1FBQ1gsQ0FBQyxHQUFHLENBQUMsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDO0tBQ3pCO0lBRUQsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ2pCLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDZixDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztTQUNqQztLQUNKO1NBQU07UUFDSCxJQUFJLFlBQVksRUFBRTtZQUNkLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1NBQ2Y7S0FDSjtJQUVELE9BQU8sQ0FBQyxDQUFDO0FBQ2IsQ0FBQztBQUVELGtCQUFrQjtBQUNsQixNQUFNLFVBQVUsYUFBYSxDQUFDLENBQWlDO0lBQzNELE9BQXNCLENBQUUsQ0FBQyxHQUFHLEtBQUssU0FBUyxDQUFDO0FBQy9DLENBQUM7QUFFRCxNQUFNLFVBQVUsaUJBQWlCLENBQUMsT0FHakM7SUFFRyxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUUxQyxPQUFPLFVBQVMsT0FBb0I7UUFDaEMsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQztRQUU1Qiw0Q0FBNEM7UUFDNUMsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNSLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7UUFFRCxNQUFNLE9BQU8sR0FBRyxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFeEQsSUFBSSxhQUFhLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDeEIsT0FBTyxPQUF1QixDQUFDO1NBQ2xDO1FBRUQsSUFBSSxNQUFNLENBQUMsS0FBSyxJQUFJLE9BQU8sQ0FBQyxRQUFRLEtBQUssT0FBTyxFQUFFO1lBQzlDLE9BQU8sRUFBRSxHQUFHLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQztTQUNwQztRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUMsQ0FBQztBQUNOLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGb3JtQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuXHJcbmltcG9ydCAqIGFzIFVybCBmcm9tICd1cmwtcGFyc2UnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJVXJsUGFyc2VSZXN1bHQge1xyXG4gICAgcHJvdG9jb2w6ICdodHRwJyB8ICdodHRwcyc7XHJcbiAgICBzbGFzaGVzOiBib29sZWFuO1xyXG4gICAgYXV0aDogc3RyaW5nO1xyXG4gICAgdXNlcm5hbWU6IHN0cmluZztcclxuICAgIHBhc3N3b3JkOiBzdHJpbmc7XHJcbiAgICBob3N0OiBzdHJpbmc7ICAvLyB3aXRoIHBvcnQgbnVtYmVyIFxyXG4gICAgaG9zdG5hbWU6IHN0cmluZzsgLy8gd2l0aG91dCBwb3J0IG51bWJlciBcclxuICAgIHBvcnQ6IG51bWJlcjsgLy8gcG9ydCBudW1iZXJcclxuICAgIHBhdGhuYW1lOiBzdHJpbmc7XHJcbiAgICBxdWVyeTogYW55O1xyXG4gICAgaGFzaDogc3RyaW5nOyAvLyAjIHBhcnRcclxuICAgIGhyZWY6IHN0cmluZztcclxuICAgIG9yaWdpbjogc3RyaW5nO1xyXG5cclxuICAgIHNldChrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZyk7XHJcbiAgICB0b1N0cmluZygpOiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUludmFsaWRTcGVjIHtcclxuICAgIHVybDogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVVcmwodmFsdWU6IHN0cmluZywgcGFyc2VRdWVyeTogYm9vbGVhbik6IElJbnZhbGlkU3BlYyB8IElVcmxQYXJzZVJlc3VsdCB7XHJcblxyXG4gICAgY29uc3QgcGF0dGVybiA9ICcoaHR0cHM/Oi8vKT8oW1xcXFxkYS16Li1dKylcXFxcLihbYS16Ll17Miw2fSlbL1xcXFx3IC4tXSovPyc7XHJcbiAgICBjb25zdCBleHByID0gbmV3IFJlZ0V4cChwYXR0ZXJuKTtcclxuICAgIGlmICghZXhwci50ZXN0KHZhbHVlKSkge1xyXG4gICAgICAgIHJldHVybiB7IHVybDogJ0ludmFsaWQgVVJMJyB9O1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHJlc3VsdHMgPSBuZXcgVXJsKHZhbHVlLCBwYXJzZVF1ZXJ5KSBhcyBJVXJsUGFyc2VSZXN1bHQ7XHJcblxyXG4gICAgaWYgKCFyZXN1bHRzLnByb3RvY29sIHx8ICFyZXN1bHRzLmhvc3QpIHtcclxuICAgICAgICByZXR1cm4geyB1cmw6ICdJbnZhbGlkIFVSTCcgfTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVzdWx0cztcclxufVxyXG5cclxuXHJcbi8qKlxyXG4qIEdpdmVuIGEgdmFsaWQgdXJsLCByZXR1cm5zIHRoZSBub3JtYWxpemVkIGhvc3QgbmFtZS4gXHJcbiogVGhlIHJldHVybmVkIGhvc3QgbmFtZSBkb2VzIG5vdCBpbmNsdWRlIHd3dyBhbmQgaXMgbG93ZXJjYXNlLlxyXG4qIFRoZSByZXR1cm5lZCBob3N0IGluY2x1ZGVzIGhvc3QgbnVtYmVyLiBcclxuKiB7fSBzdHJpbmdcclxuKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZUhvc3Qoczogc3RyaW5nLCBybTN3OiBib29sZWFuID0gdHJ1ZSkge1xyXG4gICAgLy8gQXNzdW1lIHRoYXQgcyBpcyBhIHZhbGlkIHVybFxyXG4gICAgY29uc3QgcmVzdWx0cyA9IG5ldyBVcmwocykgYXMgSVVybFBhcnNlUmVzdWx0O1xyXG4gICAgbGV0IGggPSByZXN1bHRzLmhvc3Q7XHJcbiAgICBpZiAoaC5zdGFydHNXaXRoKCd3d3cnKSkge1xyXG4gICAgICAgIGlmIChybTN3KSB7XHJcbiAgICAgICAgICAgIGggPSBoLnN1YnN0cmluZyg0KTtcclxuICAgICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmICghcm0zdykge1xyXG4gICAgICAgICAgICBoID0gJ3d3dy4nICsgaDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGg7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVVcmwoczogc3RyaW5nLCBrZWVwUXVlcnk6IGJvb2xlYW4gPSBmYWxzZSwgZW5kV2l0aFNsYXNoOiBib29sZWFuID0gZmFsc2UpIHtcclxuICAgIC8vIEFzc3VtZSB0aGF0IHMgaXMgYSB2YWxpZCB1cmxcclxuXHJcbiAgICBjb25zdCByZXN1bHRzID0gbmV3IFVybChzKSBhcyBJVXJsUGFyc2VSZXN1bHQ7XHJcbiAgICBsZXQgcGF0aCA9IHJlc3VsdHMucGF0aG5hbWU7XHJcbiAgICBwYXRoID0gcGF0aC5yZXBsYWNlKC9cXC9cXC8vZywgJy8nKTtcclxuICAgIGxldCB1ID0gcmVzdWx0cy5wcm90b2NvbCArICcvLycgKyByZXN1bHRzLmhvc3QgKyBwYXRoO1xyXG4gICAgaWYgKGtlZXBRdWVyeSkge1xyXG4gICAgICAgIHUgPSB1ICsgcmVzdWx0cy5xdWVyeTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodS5lbmRzV2l0aCgnLycpKSB7XHJcbiAgICAgICAgaWYgKCFlbmRXaXRoU2xhc2gpIHtcclxuICAgICAgICAgICAgdSA9IHUuc3Vic3RyKDAsIHUubGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAoZW5kV2l0aFNsYXNoKSB7XHJcbiAgICAgICAgICAgIHUgPSB1ICsgJy8nO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdTtcclxufVxyXG5cclxuLy8gVHlwZSBwcmVkaWNhdGUgXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0ludmFsaWRTcGVjKHY6IElVcmxQYXJzZVJlc3VsdCB8IElJbnZhbGlkU3BlYyk6IHYgaXMgSUludmFsaWRTcGVjIHtcclxuICAgIHJldHVybiAoPElJbnZhbGlkU3BlYz52KS51cmwgIT09IHVuZGVmaW5lZDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkVXJsVmFsaWRhdG9yKG9wdGlvbnM/OiB7XHJcbiAgICBodHRwcz86IGJvb2xlYW47XHJcbiAgICBwYXJzZVF1ZXJ5PzogYm9vbGVhbjtcclxufSkge1xyXG5cclxuICAgIGNvbnN0IGlucHV0cyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMpO1xyXG5cclxuICAgIHJldHVybiBmdW5jdGlvbihjb250cm9sOiBGb3JtQ29udHJvbCkge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gY29udHJvbC52YWx1ZTtcclxuXHJcbiAgICAgICAgLy8gVmlydHVhbGx5IHRydWUgaWYgdGhlcmUgaXMgbm8gYW55IHZhbHVlLiBcclxuICAgICAgICBpZiAoIXZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgcmVzdWx0cyA9IHZhbGlkYXRlVXJsKHZhbHVlLCAhIWlucHV0cy5wYXJzZVF1ZXJ5KTtcclxuXHJcbiAgICAgICAgaWYgKGlzSW52YWxpZFNwZWMocmVzdWx0cykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHMgYXMgSUludmFsaWRTcGVjO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGlucHV0cy5odHRwcyAmJiByZXN1bHRzLnByb3RvY29sICE9PSAnaHR0cHMnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHVybDogJ0hUVFBTIFJlcXVpcmVkJyB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9O1xyXG59XHJcbiJdfQ==