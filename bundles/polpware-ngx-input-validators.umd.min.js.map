{"version":3,"sources":["ng://@polpware/ngx-input-validators/lib/url/url-validator.ts","ng://@polpware/ngx-input-validators/lib/ngx-input-validators.module.ts"],"names":["validateUrl","value","parseQuery","RegExp","test","url","results","Url","protocol","host","NgxInputValidatorsModule","imports","FormsModule","options","inputs","Object","assign","control","undefined","https","s","rm3w","h","startsWith","substring","keepQuery","endWithSlash","path","pathname","replace","u","query","endsWith","substr","length"],"mappings":"0bA2BgBA,EAAYC,EAAeC,GAIvC,IADa,IAAIC,OADD,yDAENC,KAAKH,GACX,MAAO,CAAEI,IAAK,eAGlB,IAAMC,EAAU,IAAIC,EAAIN,EAAOC,GAE/B,OAAKI,EAAQE,UAAaF,EAAQG,KAI3BH,EAHI,CAAED,IAAK,gCCnCtB,SAAAK,4CAOaA,iEAAAA,IAAwBC,QAAA,CALxB,CACLC,EAAAA,sFAIKF,EAAwB,CAAAC,QAAA,CAJ7BC,EAAAA,yED2F0BC,GAK9B,IAAMC,EAASC,OAAOC,OAAO,GAAIH,GAEjC,OAAO,SAASI,GACZ,IAEMX,EAAUN,EAFFiB,EAAQhB,QAEea,EAAOZ,YAE5C,YAf6BgB,IAeXZ,EAfGD,IAgBVC,EAGPQ,EAAOK,OAA8B,UAArBb,EAAQE,SACjB,CAAEH,IAAK,kBAGX,gCAlEee,EAAWC,QAAA,IAAAA,IAAAA,GAAA,GAErC,IACIC,EADY,IAAIf,EAAIa,GACRX,KAWhB,OAVIa,EAAEC,WAAW,OACTF,IACAC,EAAIA,EAAEE,UAAU,IAGfH,IACDC,EAAI,OAASA,GAIdA,2BAGkBF,EAAWK,EAA4BC,QAA5B,IAAAD,IAAAA,GAAA,QAA4B,IAAAC,IAAAA,GAAA,GAGhE,IAAMpB,EAAU,IAAIC,EAAIa,GACpBO,EAAOrB,EAAQsB,SACnBD,EAAOA,EAAKE,QAAQ,QAAS,KAC7B,IAAIC,EAAIxB,EAAQE,SAAW,KAAOF,EAAQG,KAAOkB,EAejD,OAdIF,IACAK,GAAQxB,EAAQyB,OAGhBD,EAAEE,SAAS,KACNN,IACDI,EAAIA,EAAEG,OAAO,EAAGH,EAAEI,OAAS,IAG3BR,IACAI,GAAQ,KAITA","sourcesContent":["import { FormControl } from '@angular/forms';\r\n\r\nimport * as Url from 'url-parse';\r\n\r\nexport interface IUrlParseResult {\r\n    protocol: 'http' | 'https';\r\n    slashes: boolean;\r\n    auth: string;\r\n    username: string;\r\n    password: string;\r\n    host: string;  // with port number \r\n    hostname: string; // without port number \r\n    port: number; // port number\r\n    pathname: string;\r\n    query: any;\r\n    hash: string; // # part\r\n    href: string;\r\n    origin: string;\r\n\r\n    set(key: string, value: string);\r\n    toString(): string;\r\n}\r\n\r\nexport interface IInvalidSpec {\r\n    url: string;\r\n}\r\n\r\nexport function validateUrl(value: string, parseQuery: boolean): IInvalidSpec | IUrlParseResult {\r\n\r\n    const pattern = '(https?://)?([\\\\da-z.-]+)\\\\.([a-z.]{2,6})[/\\\\w .-]*/?';\r\n    const expr = new RegExp(pattern);\r\n    if (!expr.test(value)) {\r\n        return { url: 'Invalid URL' };\r\n    }\r\n\r\n    const results = new Url(value, parseQuery) as IUrlParseResult;\r\n\r\n    if (!results.protocol || !results.host) {\r\n        return { url: 'Invalid URL' };\r\n    }\r\n\r\n    return results;\r\n}\r\n\r\n\r\n/**\r\n* Given a valid url, returns the normalized host name. \r\n* The returned host name does not include www and is lowercase.\r\n* The returned host includes host number. \r\n* {} string\r\n*/\r\nexport function normalizeHost(s: string, rm3w: boolean = true) {\r\n    // Assume that s is a valid url\r\n    const results = new Url(s) as IUrlParseResult;\r\n    let h = results.host;\r\n    if (h.startsWith('www')) {\r\n        if (rm3w) {\r\n            h = h.substring(4);\r\n        }\r\n    } else {\r\n        if (!rm3w) {\r\n            h = 'www.' + h;\r\n        }\r\n    }\r\n\r\n    return h;\r\n}\r\n\r\nexport function normalizeUrl(s: string, keepQuery: boolean = false, endWithSlash: boolean = false) {\r\n    // Assume that s is a valid url\r\n\r\n    const results = new Url(s) as IUrlParseResult;\r\n    let path = results.pathname;\r\n    path = path.replace(/\\/\\//g, '/', );\r\n    let u = results.protocol + '//' + results.host + path;\r\n    if (keepQuery) {\r\n        u = u + results.query;\r\n    }\r\n\r\n    if (u.endsWith('/')) {\r\n        if (!endWithSlash) {\r\n            u = u.substr(0, u.length - 1);\r\n        }\r\n    } else {\r\n        if (endWithSlash) {\r\n            u = u + '/';\r\n        }\r\n    }\r\n\r\n    return u;\r\n}\r\n\r\n// Type predicate \r\nfunction isInvalidSpec(v: IUrlParseResult | IInvalidSpec): v is IInvalidSpec {\r\n    return (<IInvalidSpec>v).url !== undefined;\r\n}\r\n\r\nexport function buildUrlValidator(options?: {\r\n    https?: boolean;\r\n    parseQuery?: boolean;\r\n}) {\r\n\r\n    const inputs = Object.assign({}, options);\r\n\r\n    return function(control: FormControl) {\r\n        const value = control.value;\r\n\r\n        const results = validateUrl(value, !!inputs.parseQuery);\r\n\r\n        if (isInvalidSpec(results)) {\r\n            return results;\r\n        }\r\n\r\n        if (inputs.https && results.protocol !== 'https') {\r\n            return { url: 'HTTPS Required' };\r\n        }\r\n\r\n        return null;\r\n    };\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n    declarations: [],\n    imports: [\n        FormsModule\n    ],\n    exports: []\n})\nexport class NgxInputValidatorsModule { }\n"]}