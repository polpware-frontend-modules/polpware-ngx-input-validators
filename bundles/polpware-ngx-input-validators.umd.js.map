{"version":3,"file":"polpware-ngx-input-validators.umd.js","sources":["ng://@polpware/ngx-input-validators/lib/url/url-validator.ts","ng://@polpware/ngx-input-validators/lib/ngx-input-validators.module.ts"],"sourcesContent":["import { FormControl } from '@angular/forms';\r\n\r\nimport * as Url from 'url-parse';\r\n\r\nexport interface IUrlParseResult {\r\n    protocol: 'http' | 'https';\r\n    slashes: boolean;\r\n    auth: string;\r\n    username: string;\r\n    password: string;\r\n    host: string;  // with port number \r\n    hostname: string; // without port number \r\n    port: number; // port number\r\n    pathname: string;\r\n    query: any;\r\n    hash: string; // # part\r\n    href: string;\r\n    origin: string;\r\n\r\n    set(key: string, value: string);\r\n    toString(): string;\r\n}\r\n\r\nexport interface IInvalidSpec {\r\n    url: string;\r\n}\r\n\r\nexport function validateUrl(value: string, parseQuery: boolean): IInvalidSpec | IUrlParseResult {\r\n\r\n    const pattern = '(https?://)?([\\\\da-z.-]+)\\\\.([a-z.]{2,6})[/\\\\w .-]*/?';\r\n    const expr = new RegExp(pattern);\r\n    if (!expr.test(value)) {\r\n        return { url: 'Invalid URL' };\r\n    }\r\n\r\n    const results = new Url(value, parseQuery) as IUrlParseResult;\r\n\r\n    if (!results.protocol || !results.host) {\r\n        return { url: 'Invalid URL' };\r\n    }\r\n\r\n    return results;\r\n}\r\n\r\n\r\n/**\r\n* Given a valid url, returns the normalized host name. \r\n* The returned host name does not include www and is lowercase.\r\n* The returned host includes host number. \r\n* {} string\r\n*/\r\nexport function normalizeHost(s: string, rm3w: boolean = true) {\r\n    // Assume that s is a valid url\r\n    const results = new Url(s) as IUrlParseResult;\r\n    let h = results.host;\r\n    if (h.startsWith('www')) {\r\n        if (rm3w) {\r\n            h = h.substring(4);\r\n        }\r\n    } else {\r\n        if (!rm3w) {\r\n            h = 'www.' + h;\r\n        }\r\n    }\r\n\r\n    return h;\r\n}\r\n\r\nexport function normalizeUrl(s: string, keepQuery: boolean = false, endWithSlash: boolean = false) {\r\n    // Assume that s is a valid url\r\n\r\n    const results = new Url(s) as IUrlParseResult;\r\n    let path = results.pathname;\r\n    path = path.replace(/\\/\\//g, '/');\r\n    let u = results.protocol + '//' + results.host + path;\r\n    if (keepQuery) {\r\n        u = u + results.query;\r\n    }\r\n\r\n    if (u.endsWith('/')) {\r\n        if (!endWithSlash) {\r\n            u = u.substr(0, u.length - 1);\r\n        }\r\n    } else {\r\n        if (endWithSlash) {\r\n            u = u + '/';\r\n        }\r\n    }\r\n\r\n    return u;\r\n}\r\n\r\n// Type predicate \r\nexport function isInvalidSpec(v: IUrlParseResult | IInvalidSpec): v is IInvalidSpec {\r\n    return (<IInvalidSpec>v).url !== undefined;\r\n}\r\n\r\nexport function buildUrlValidator(options?: {\r\n    https?: boolean;\r\n    parseQuery?: boolean;\r\n}) {\r\n\r\n    const inputs = Object.assign({}, options);\r\n\r\n    return function(control: FormControl) {\r\n        const value = control.value;\r\n\r\n        const results = validateUrl(value, !!inputs.parseQuery);\r\n\r\n        if (isInvalidSpec(results)) {\r\n            return results;\r\n        }\r\n\r\n        if (inputs.https && results.protocol !== 'https') {\r\n            return { url: 'HTTPS Required' };\r\n        }\r\n\r\n        return null;\r\n    };\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n    declarations: [],\n    imports: [\n        FormsModule\n    ],\n    exports: []\n})\nexport class NgxInputValidatorsModule { }\n"],"names":["FormsModule","NgModule"],"mappings":"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"}